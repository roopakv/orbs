description: |
  Triggers multiple workflows in one pipeline. The decision on which
  workflows are based on the files that have been modified. This command
  is specifically useful in monorepos. If there are multiple projects within
  a monorepo this command lets you trigger one pipeline with all the workflows
  corresponding to the files that have been modified.

  This job (similar to other jobs on siwssknife) expects
  CIRCLE_TOKEN is set as an env variable.

  On the base branch (generally master), you can choose to run all workflows
  or just the workflows which have code modified.

  Since CircleCI inputs don't allow for lists, the input to this job
  is JSON. It is a list of objects each of which contain "regex" to test for modified
  files and "parameter_name" which causes that workflow to be triggered.

  Generally any job with this command should have no other steps, however we leave it
  as a command to allow flexibility and not force custom executors etc.

  This command is fairly complex, and the best way to understand the use of this
  command, take a look at the example at https://github.com/swissknife/circle-monorepo

parameters:
  base-branch:
    description: |
      The base branch for the repo. Based on the parameter "run-mode-for-base-branch",
      you can either run all workflows or only the workflows of code modified in the last
      commit.
    type: string
    default: master
  run-mode-for-base-branch:
    description: |
      The mechanism to use on the base branch. "run_all" simply runs all workflows on the base
      branch (only the triggers passed into the map). "run_for_last_commit", looks at the code
      modified in the last commit and Triggers a pipeline with all workflows according to that
      commit. If your team uses only squash merges "run_for_last_commit" will work well.
      Currently this command has not been tested for non squash merges to the base branch.
    type: enum
    enum: ["run_all", "run_for_last_commit"]
    default: run_all
  use-divergence-point:
    description: |
      Find the divergence from the branch passed above, rather than the current HEAD. This is helpful
      in branches. If true it looks at all code modified since the divergence from abse branch (say master),
      otherwise if false it only looks at the last commit.
    type: boolean
    default: true
  code-param-name-map:
    description: |
      Circle CI doesnt yet accept list inputs, so we accept a json blob as input. It is
      a list of objects each of which contain "regex" to test for modified files and
      "param_name" which causes that workflow to be triggered. the param_name is always
      triggered with value true. In the future as Circle CI works with comparing values
      in when clauses other param values will be accepted.

      i.e. [{"regex": "/path/to/servercode", "param_name": "run_server_workflow"}]
    type: string
  additional-param-map:
    description: |
      Any additional params that should be sent with the workflow trigger. Generally
      there needs to be one additional param to make sure the workflow that contains
      this command is not triggered resulting in an infinite loop.

      Rather than just allow one additional param we accept a json so other params can
      be passed in. This param is required in order to make sure no infinite loops occur.

      Input should be json, something like '{"run_trigger_workflow": false}'
    type: string
  repo-name:
    type: env_var_name
    description: The repo to trigger the workflow on
    default: CIRCLE_PROJECT_REPONAME
  user:
    description: Username for the Github Project
    type: env_var_name
    default: CIRCLE_PROJECT_USERNAME
  vcs-type:
    description: What is the VCS for this project
    type: string
    default: github
  use-swissknife-sha:
    description: |
      Adds the current commit sha to the trigger so that you can checkout the relevant commit. This is mainly
      because Circle does not let you specify commit when triggering a pipeline. If you suspect your repo has
      a high velocity and would like ot make sure that you are definitely triggering on the same commit set this
      to true.

      Note that this has additional requirements:
      - You need to use the sk-checkout command which is a wrapper on the checkout command
      - You need to add a pipeline param 'swissknife_sha' to your config and pass it in to the swissknife/sk-checkout command

      You can see an example of this in the example repo above.
    type: boolean
    default: false
steps:
  - run:
      name: Swissknife - Trigger workflows for all modified
      command: |
        if [ -z "$BASH" ]; then
          echo Bash not installed.
          exit 1
        fi
        git status >/dev/null 2>&1 || { echo >&2 "Not in a git directory or no git"; exit 1; }
        circleci-agent >/dev/null 2>&1 || { echo >&2 "No Circle CI agent. These are in all Circle CI containers"; exit 1; }
        if [[ "$CIRCLE_TOKEN" == "" ]]; then
          echo "CIRCLE_TOKEN not set. Set a token to access the circle API in the env var CIRCLE_TOKEN";
          exit 1;
        fi

        # Validate input JSON.
        echo "Validating input JSON";
        echo '<< parameters.code-param-name-map >>' | jq type || { echo "Invalid input map JSON"; exit 1; }
        echo '<< parameters.additional-param-map >>' | jq type || { echo "Invalid additional param map JSON"; exit 1; }

        append_string_to_params() {
          current_data=`cat /tmp/swissknife/workflow_params.json`
          echo $current_data | jq --arg param $1 --arg param2 $2 '. + {($param): ($param2)}' | jq -cr > /tmp/swissknife/workflow_params.json
        }

        mkdir -p /tmp/swissknife
        touch /tmp/swissknife/workflow_params.json
        echo '<< parameters.additional-param-map >>' | jq -j . > /tmp/swissknife/workflow_params.json
        <<# parameters.use-swissknife-sha >>
        append_string_to_params "swissknife_sha" $CIRCLE_SHA1
        <</ parameters.use-swissknife-sha >>

        FILES_MODIFIED=""
        get_modified_files_for_regex() {
          FILES_MODIFIED=""
          FILES_MODIFIED=$(git diff --name-only origin/<< parameters.base-branch >>..HEAD | grep -i -E $1)
          <<# parameters.use-divergence-point >>
          FILES_MODIFIED=$(git diff --name-only $(git merge-base HEAD origin/<< parameters.base-branch >>)..HEAD | grep -i -E $1)
          <</ parameters.use-divergence-point >>
        }

        get_modified_files_for_commit_regex() {
          FILES_MODIFIED=$(git diff --name-only HEAD HEAD~1 | grep -i -E $1)
        }

        append_to_params() {
          touch /tmp/swissknife/params_exist
          current_data=`cat /tmp/swissknife/workflow_params.json`
          echo $current_data | jq --arg param $1 '. + {($param): true}' | jq -cr > /tmp/swissknife/workflow_params.json
        }

        trigger_workflow() {
          if [[ ! -f "/tmp/swissknife/params_exist" ]]; then
            echo "No params added, which means no workflows to be triggered. Skipping call to Circle CI";
            exit 0;
          fi

          echo "Calling Circle CI for branch: $CIRCLE_BRANCH with params"
          custom_params=`cat /tmp/swissknife/workflow_params.json`
          echo $custom_params

          curl --silent -X POST \
            "https://circleci.com/api/v2/project/<< parameters.vcs-type >>/$<< parameters.user >>/$<< parameters.repo-name >>/pipeline?circle-token=${CIRCLE_TOKEN}" \
            -H 'Accept: */*' \
            -H 'Content-Type: application/json' \
            -d '{
              "branch": "'$CIRCLE_BRANCH'",
              "parameters": '$custom_params'
            }'
        }

        generate_branch_params() {
          input_map=`echo '<< parameters.code-param-name-map >>'`
          echo "$input_map" | jq -c '.[]' |
          while IFS=$"\n" read -r mod; do
              echo ""
              regex=$(echo "$mod" | jq -r '.regex')
              param_name=$(echo "$mod" | jq -r '.param_name')

              echo "Processing param_name: $param_name regex: $regex";

              if [[ "$CIRCLE_BRANCH" == "<< parameters.base-branch >>" ]]; then
                get_modified_files_for_commit_regex $regex || true
              else
                get_modified_files_for_regex $regex || true
              fi

              if [ -z "$FILES_MODIFIED" ]
              then
                echo "Files not modified for $param_name";
              else
                echo "Files modified for $param_name"
                echo "$FILES_MODIFIED"
                echo "appending param to list of inputs"
                echo ""
                append_to_params $param_name

                echo "Current Params:"
                cat /tmp/swissknife/workflow_params.json
                echo ""
              fi
          done
        }

        generate_all_params() {
          input_map=`echo '<< parameters.code-param-name-map >>'`
          echo "$input_map" | jq -c '.[]' |
          while IFS=$"\n" read -r mod; do
              echo ""
              echo "Processing $mod"
              regex=$(echo "$mod" | jq -r '.regex')
              param_name=$(echo "$mod" | jq -r '.param_name')

              append_to_params $param_name

              echo "Current Params:"
              cat /tmp/swissknife/workflow_params.json
              echo ""
          done
        }

        if [ "$CIRCLE_BRANCH" == "<< parameters.base-branch >>" ]; then
          if [[ "run_all" == "<< parameters.run-mode-for-base-branch >>" ]]; then
            generate_all_params
          else
            generate_branch_params
          fi
          trigger_workflow
          exit 0;
        fi

        echo "Non base branch";
        generate_branch_params
        trigger_workflow
