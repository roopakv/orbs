description: |
  This command waits for running workflows of a kind on a given branch to complete. Adding This
  as the first step in a job will make the job wait till it is the only running workflow.
  This requires a circle token be set as $CIRCLE_TOKEN

parameters:
  branch-to-consider:
    description: The branch on which we will wait for workflows
    type: string
    default: master
  max-wait-time:
    description: |
      The max wait time in seconds a job should wait for before killing itself.
    type: string
    default: "600"
  kill-gracefully:
    description: If true and time exceeds max wait time, dies without failing the job
    type: string
    default: "true"
  workflow-name:
    description: The type of workflows to wait for. This can be a regex
    type: string
    default: "*"
  vcs-type:
    description: What is the VCS for this project
    type: string
    default: github
  sleep-time-between-checks:
    description: How long to sleep between checks.
    type: string
    default: "30"

steps:
  - run:
      name: Swissknife - Wait for workflows
      command: |
        if [ -z "$BASH" ]; then
          echo Bash not installed.
          exit 1
        fi
        hash jq 2>/dev/null || { echo >&2 "jq is not installed.  Aborting."; exit 1; }

        slug="<< parameters.vcs-type >>/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
        branch_to_consider="<< parameters.branch-to-consider >>"

        # Assume there is one workflow running.
        total_workflows_running="1"
        can_i_run="true"

        mkdir -p /tmp/swissknife

        # This is a global variable used to get return value for get_workflow_start_time
        workflow_start_time=""

        get_workflow_start_time() {
          wf_url="https://circleci.com/api/v2/workflow/$1?circle-token=${CIRCLE_TOKEN}"
          curl -f -s $wf_url > /tmp/swissknife/wf_$1.json
          workflow_start_time=$(jq '.created_at' /tmp/swissknife/wf_$1.json)
        }

        get_num_running_workflows() {
          running_jobs_url="https://circleci.com/api/v1.1/project/$slug/tree/$branch_to_consider?circle-token=${CIRCLE_TOKEN}&filter=running"
          curl -f -s $running_jobs_url > /tmp/swissknife/running_jobs.json
          total_workflows_running=$(jq --arg curworkflow "$CIRCLE_WORKFLOW_ID" '[unique_by(.workflows.workflow_id) | .[] | select(.workflows.workflow_name|test("<< parameters.workflow-name >>")) | select(.workflows.workflow_id|test($curworkflow)|not) ] | length' /tmp/swissknife/running_jobs.json)
          # If no other workflows are running, we're good. just return
          if [ "$total_workflows_running" == "0" ]; then
            return 0
          fi

          # Finding all running workflows
          jq -r --arg curworkflow "$CIRCLE_WORKFLOW_ID" 'unique_by(.workflows.workflow_id) | .[] | select(.workflows.workflow_name|test("<< parameters.workflow-name >>")) | select(.workflows.workflow_id|test($curworkflow)|not) | .workflows.workflow_id' /tmp/swissknife/running_jobs.json > /tmp/swissknife/running_workflows.txt

          get_workflow_start_time $CIRCLE_WORKFLOW_ID
          current_workflow_start_time=$workflow_start_time

          can_i_run="true"
          while IFS= read -r line
          do
            echo "Checking info for workflow:$line"
            get_workflow_start_time $line
            running_wf_start_time=$workflow_start_time
            if [[ $running_wf_start_time < $current_workflow_start_time ]] ; then
              can_i_run="false"
              break
            fi
          done < /tmp/swissknife/running_workflows.txt
        }

        kill_workflow(){
          echo "Cancelleing workflow by cancelling build ${CIRCLE_BUILD_NUM}"
          cancel_workflow_url="https://circleci.com/api/v1.1/project/$slug/${CIRCLE_BUILD_NUM}/cancel?circle-token=${CIRCLE_TOKEN}"
          curl -s -X POST $cancel_workflow_url > /dev/null
          # Give CircleCI enough time to kill this workflow
          sleep 30
          # If the job wasnt canceled in 30 seconds fail.
          exit 1;
        }

        current_wait_time=0

        while true; do
          get_num_running_workflows
          if [[ "$total_workflows_running" == "0" || "$can_i_run" == "true" ]]; then
            echo "Its finally my turn. exiting"
            exit 0
          else
            echo "Looks like $total_workflows_running are still running. and can_i_run:$can_i_run"
            echo "Going to sleep for << parameters.sleep-time-between-checks >>"
            sleep << parameters.sleep-time-between-checks >>
            current_wait_time=$(( current_wait_time + << parameters.sleep-time-between-checks >> ))
          fi

          if (( $current_wait_time > << parameters.max-wait-time >> )); then
            if [[ "<< parameters.kill-gracefully >>" == "true" ]]; then
              echo "Killing workflow by cancelling";
              kill_workflow
            else
              echo "Killing workflow by exiting forcefully";
              exit 1;
            fi
          fi
        done


