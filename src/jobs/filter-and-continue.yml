description: >
  Continues a pipeline in the `setup` state based with static config
  and a set of pipeline parameters based on the changes in this push.

  This is the Swissknife variation of path filtering described here.
  https://github.com/CircleCI-Public/api-preview-docs/blob/path-filtering/docs/path-filtering.md#using-the-path-filtering-orb

  This lets swissknife users continue without having to change their regexes and custom setup.
docker:
  - image: circleci/node:10

parameters:
  base-branch:
    description: |
      The base branch for the repo. Based on the parameter "run-mode-for-base-branch",
      you can either run all workflows or only the workflows of code modified in the last
      commit.
    type: string
    default: master
  run-mode-for-base-branch:
    description: |
      The mechanism to use on the base branch. "run_all" simply runs all workflows on the base
      branch (only the triggers passed into the map). "run_for_last_commit", looks at the code
      modified in the last commit and Triggers a pipeline with all workflows according to that
      commit. If your team uses only squash merges "run_for_last_commit" will work well.
      Currently this command has not been tested for non squash merges to the base branch.
    type: enum
    enum: ["run_all", "run_for_last_commit"]
    default: run_all
  use-divergence-point:
    description: |
      Find the divergence from the branch passed above, rather than the current HEAD. This is helpful
      in branches. If true it looks at all code modified since the divergence from abse branch (say master),
      otherwise if false it only looks at the last commit.
    type: boolean
    default: true
  code-param-name-map:
    description: |
      Circle CI doesnt yet accept list inputs, so we accept a json blob as input. It is
      a list of objects each of which contain "regex" to test for modified files and
      "param_name" which causes that workflow to be triggered. the param_name is always
      triggered with value true. In the future as Circle CI works with comparing values
      in when clauses other param values will be accepted.

      i.e. [{"regex": "/path/to/servercode", "param_name": "run_server_workflow"}]
    type: string
  search-mode:
    description: |
      By default searching for file matches uses grep with the extended matcher. The other option
      involves using perl. Perl supports more complicated regexes such as negative lookahead etc.
      Note that perl mode only works if perl is installed.
    type: enum
    default: grep
    enum: ["grep", "perl"]
  config-path:
    type: string
    default: ".circleci/continue_config.yml"
    description: >
      The location of the config to continue the pipeline with.
steps:
  - checkout
  - filter-and-continue:
      base-branch: << parameters.base-branch >>
      run-mode-for-base-branch: << parameters.run-mode-for-base-branch >>
      use-divergence-point: << parameters.use-divergence-point >>
      code-param-name-map: << parameters.code-param-name-map >>
      search-mode: << parameters.search-mode >>
      config-path: << parameters.config-path >>
